import telebot
import re
from telebot import types
from base.base import to_base, read_json_file

TOKEN = ''
bot = telebot.TeleBot(TOKEN)
GAME_INFO = []
base = []


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    CreateGameButton = types.KeyboardButton("üìÇ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É")
    GamesOnWeekButton = types.KeyboardButton("üìÇ –ò–≥—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ")
    ProfileButton = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    InfoButton = types.KeyboardButton("üìÉ –ò–Ω—Ñ–æ")
    markup.add(CreateGameButton, GamesOnWeekButton)
    markup.add(ProfileButton, InfoButton)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üìÉ –ò–Ω—Ñ–æ")
def info_button(message):
    bot.send_message(message.chat.id, "<–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>")


@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile_button(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    MyParticipationButton = types.KeyboardButton("üé≤ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è")
    MyGamesButton = types.KeyboardButton("üé≤ –ú–æ–∏ –∏–≥—Ä—ã")
    FriendsButton = types.KeyboardButton("üë§ –î—Ä—É–∑—å—è")
    ReturnButton = types.KeyboardButton("üìÇ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    markup.add(MyParticipationButton, MyGamesButton)
    markup.add(FriendsButton, ReturnButton)

    bot.send_message(message.chat.id, "üë§ –ü—Ä–æ—Ñ–∏–ª—å:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üìÇ –ò–≥—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ")
def games_onweek_button(message):
    bot.send_message(message.chat.id, "üìÇ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä")


@bot.message_handler(func=lambda message: message.text == "üìÇ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É")
def create_game_button(message):
    empty_markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'NewGame'):", reply_markup=empty_markup)
    bot.register_next_step_handler(message, handle_game_name_from_create_game)


def handle_game_name_from_create_game(message):
    game_name = message.text.strip()
    if not game_name:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, handle_game_name_from_create_game)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Å —É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    global GAME_INFO, base
    GAME_INFO = [game_name]
    base = []
    bot.send_message(message.chat.id, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '3'):")
    bot.register_next_step_handler(message, get_number_of_players)


@bot.message_handler(func=lambda message: message.text == "üé≤ –ú–æ–∏ —É—á–∞—Å—Ç–∏—è")
def participation_button(message):
    empty_markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "üïñ –û–∂–∏–¥–∞–π—Ç–µ", reply_markup=empty_markup)

    markup = types.ReplyKeyboardMarkup()
    CreateReportButton = types.KeyboardButton("üìÇ –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç")
    ShowReportButton = types.KeyboardButton("üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã")
    ReturnButton = types.KeyboardButton("üìÇ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    markup.add(CreateReportButton, ShowReportButton)
    markup.add(ReturnButton)

    bot.send_message(message.chat.id, "üéÆ –í–∞—à–∏ —É—á–∞—Å—Ç–∏—è:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üìÇ –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç")
def create_report(message):
    global GAME_INFO, base
    GAME_INFO = []
    base = []
    bot.send_message(message.chat.id, "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'GameName'):")
    bot.register_next_step_handler(message, get_game_name)


def get_game_name(message):
    game_name = message.text.strip()
    if not game_name:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, get_game_name)
        return
    GAME_INFO.append(game_name)
    bot.send_message(message.chat.id, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '3'):")
    bot.register_next_step_handler(message, get_number_of_players)


def get_number_of_players(message):
    text = message.text.strip()
    match = re.search(r'\d+', text)
    if not match:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, get_number_of_players)
        return
    num_players = int(match.group())
    GAME_INFO.append(num_players)
    bot.send_message(message.chat.id,
                     f"üë§ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ 1 –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '@–Ω–∏–∫ –ò–º—è 10'\n(–≥–¥–µ 10 ‚Äî –æ—á–∫–∏):")
    bot.register_next_step_handler(message, get_player_info, 1, num_players)


def get_player_info(message, player, num_players):
    global base
    text = message.text.strip()
    parts = text.split()

    if len(parts) != 3 or not parts[0].startswith('@') or not parts[2].isdigit() or ' ' in parts[1]:
        bot.send_message(message.chat.id,
                         f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player} –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '@–Ω–∏–∫ –ò–º—è 10'")
        bot.register_next_step_handler(message, get_player_info, player, num_players)
        return

    username = parts[0]
    nickname = parts[1]
    score = int(parts[2])
    base.append((f"{username} {nickname}", score))

    if player >= num_players:
        GAME_INFO.append(base)
        bot.send_message(message.chat.id, "üìú –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '20–º' –∏–ª–∏ '2—á' –∏–ª–∏ '2—á 15–º'):")
        bot.register_next_step_handler(message, get_rules)
    else:
        bot.send_message(message.chat.id,
                         f"üë§ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player + 1} –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '@–Ω–∏–∫ –ò–º—è 10'")
        bot.register_next_step_handler(message, get_player_info, player + 1, num_players)


def get_rules(message):
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "20–º", "2—á", "1—á 30–º"
    pattern = r'^((\d{1,2}—á)?\s?(\d{1,2}–º)?)$'
    match = re.match(pattern, text)

    if not match:
        bot.send_message(message.chat.id,
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: '20–º', '2—á', '1—á 30–º'")
        bot.register_next_step_handler(message, get_rules)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    hours_match = re.search(r'(\d{1,2})—á', text)
    minutes_match = re.search(r'(\d{1,2})–º', text)

    if hours_match:
        hours = int(hours_match.group(1))
        if not (1 <= hours <= 24):
            bot.send_message(message.chat.id, "‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 24. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, get_rules)
            return

    if minutes_match:
        minutes = int(minutes_match.group(1))
        if not (1 <= minutes <= 60):
            bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 60. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, get_rules)
            return

    GAME_INFO.append(text)
    bot.send_message(message.chat.id,
                     "‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2—á 15–º', '2—á', –∏–ª–∏ '45–º'):")
    bot.register_next_step_handler(message, get_to_base)


def get_to_base(message):
    text = message.text.strip()
    pattern = r'^((\d{1,2}—á)?\s?(\d{1,2}–º)?)$'
    match = re.match(pattern, text)

    if not match:
        bot.send_message(message.chat.id,
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: '2—á 15–º', '2—á', '45–º'")
        bot.register_next_step_handler(message, get_to_base)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    hours_match = re.search(r'(\d{1,2})—á', text)
    minutes_match = re.search(r'(\d{1,2})–º', text)

    if hours_match:
        hours = int(hours_match.group(1))
        if not (1 <= hours <= 24):
            bot.send_message(message.chat.id, "‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 24. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, get_to_base)
            return

    if minutes_match:
        minutes = int(minutes_match.group(1))
        if not (1 <= minutes <= 60):
            bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 60. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, get_to_base)
            return

    GAME_INFO.append(text)
    to_base(GAME_INFO)
    bot.send_message(message.chat.id, "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    send_welcome(message)


@bot.message_handler(func=lambda message: message.text == "üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã")
def show_reports(message):
    report = read_json_file("base/data.json")

    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    max_message_length = 4096

    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
    for i in range(0, len(report), max_message_length):
        bot.send_message(message.chat.id, report[i:i + max_message_length], parse_mode='MarkdownV2')


@bot.message_handler(func=lambda message: message.text == "üé≤ –ú–æ–∏ –∏–≥—Ä—ã")
def my_games_button(message):
    bot.send_message(message.chat.id, "–ü–æ–∫–∞ –≤—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—Å—Ç–æ–≤")


# –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –í –ë–£–î–£–©–ï–ú –ë–£–î–ï–¢ –ü–ï–†–ï–ü–ò–°–ê–ù–ê –ò –£–°–õ–û–ñ–ù–ï–ù–ê
@bot.message_handler(func=lambda message: message.text == "üë§ –î—Ä—É–∑—å—è")
def my_friends_button(message):
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò—Å–∫–∞—Ç—å –¥—Ä—É–∑–µ–π"
    inline_markup = types.InlineKeyboardMarkup()
    FindFriendsButton = types.InlineKeyboardButton("üîé –ò—Å–∫–∞—Ç—å –¥—Ä—É–∑–µ–π", callback_data='find_friends')
    inline_markup.add(FindFriendsButton)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ò—Å–∫–∞—Ç—å –¥—Ä—É–∑–µ–π"
    bot.send_message(message.chat.id, "üë• –í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥—Ä—É–∑–µ–π", reply_markup=inline_markup)


# –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –í –ë–£–î–£–©–ï–ú –ë–£–î–ï–¢ –ü–ï–†–ï–ü–ò–°–ê–ù–ê –ò –£–°–õ–û–ñ–ù–ï–ù–ê
@bot.callback_query_handler(func=lambda call: call.data == 'find_friends')
def find_friends_operation(call):
    empty_markup = types.ReplyKeyboardRemove()
    bot.send_message(call.message.chat.id, "üïñ –ü–æ–¥–æ–∂–¥–∏—Ç–µ", reply_markup=empty_markup)
    markup = types.InlineKeyboardMarkup()
    CancelButton = types.InlineKeyboardButton("‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='cancel')
    markup.add(CancelButton)
    bot.send_message(call.message.chat.id, "üîé –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üìÇ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
def return_to_menu(message):
    send_welcome(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_operation(call):
    send_welcome(call.message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
