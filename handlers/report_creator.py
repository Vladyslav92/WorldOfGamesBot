from WorldOfGamesBot.base.base import to_base
import re

GAME_INFO = []
base = []


def create_report(bot, message):
    global GAME_INFO, base
    GAME_INFO = []
    base = []
    bot.send_message(message.chat.id, "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'GameName'):")
    bot.register_next_step_handler(message, lambda msg: get_game_name(bot, msg))


def get_game_name(bot, message):
    game_name = message.text.strip()
    if not game_name:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, lambda msg: get_game_name(bot, msg))
        return
    GAME_INFO.append(game_name)
    bot.send_message(message.chat.id, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '3'):")
    bot.register_next_step_handler(message, lambda msg: get_number_of_players(bot, msg))


def get_number_of_players(bot, message):
    text = message.text.strip()
    match = re.search(r'\d+', text)
    if not match:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, lambda msg: get_number_of_players(bot, msg))
        return
    num_players = int(match.group())
    GAME_INFO.append(num_players)
    bot.send_message(message.chat.id,
                     f"üë§ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ 1 –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '@–Ω–∏–∫ –ò–º—è 10'")
    bot.register_next_step_handler(message, lambda msg: get_player_info(bot, msg, 1, num_players))


def get_player_info(bot, message, player, num_players):
    global base
    text = message.text.strip()
    parts = text.split()

    if len(parts) != 3 or not parts[0].startswith('@') or not parts[2].isdigit() or ' ' in parts[1]:
        bot.send_message(message.chat.id,
                         f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player} –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '@–Ω–∏–∫ –ò–º—è 10'")
        bot.register_next_step_handler(message, lambda msg: get_player_info(bot, msg, player, num_players))
        return

    username = parts[0]
    nickname = parts[1]
    score = int(parts[2])
    base.append((f"{username} {nickname}", score))

    if player >= num_players:
        GAME_INFO.append(base)
        bot.send_message(message.chat.id, "üìú –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '20–º'):")
        bot.register_next_step_handler(message, lambda msg: get_rules(bot, msg))
    else:
        bot.send_message(message.chat.id,
                         f"üë§ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player + 1} –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '@–Ω–∏–∫ –ò–º—è 10'")
        bot.register_next_step_handler(message, lambda msg: get_player_info(bot, msg, player + 1, num_players))


def get_rules(bot, message):
    text = message.text.strip()
    pattern = r'^((\d{1,2}—á)?\s?(\d{1,2}–º)?)$'
    match = re.match(pattern, text)

    if not match:
        bot.send_message(message.chat.id,
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: '20–º', '2—á', '1—á 30–º'")
        bot.register_next_step_handler(message, lambda msg: get_rules(bot, msg))
        return

    hours_match = re.search(r'(\d{1,2})—á', text)
    minutes_match = re.search(r'(\d{1,2})–º', text)

    if hours_match and not (1 <= int(hours_match.group(1)) <= 24):
        bot.send_message(message.chat.id, "‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 24. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, lambda msg: get_rules(bot, msg))
        return

    if minutes_match and not (1 <= int(minutes_match.group(1)) <= 60):
        bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 60. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, lambda msg: get_rules(bot, msg))
        return

    GAME_INFO.append(text)
    bot.send_message(message.chat.id, "‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2—á 15–º', '2—á', –∏–ª–∏ '45–º'):")
    bot.register_next_step_handler(message, lambda msg: get_to_base(bot, msg))


def get_to_base(bot, message):
    text = message.text.strip()
    pattern = r'^((\d{1,2}—á)?\s?(\d{1,2}–º)?)$'
    match = re.match(pattern, text)

    if not match:
        bot.send_message(message.chat.id,
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: '2—á 15–º', '2—á', '45–º'")
        bot.register_next_step_handler(message, lambda msg: get_to_base(bot, msg))
        return

    hours_match = re.search(r'(\d{1,2})—á', text)
    minutes_match = re.search(r'(\d{1,2})–º', text)

    if hours_match and not (1 <= int(hours_match.group(1)) <= 24):
        bot.send_message(message.chat.id, "‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 24. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, lambda msg: get_to_base(bot, msg))
        return

    if minutes_match and not (1 <= int(minutes_match.group(1)) <= 60):
        bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 60. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(message, lambda msg: get_to_base(bot, msg))
        return

    GAME_INFO.append(text)
    to_base(GAME_INFO)
    bot.send_message(message.chat.id, "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
