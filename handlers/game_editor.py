import json
import re
from datetime import datetime
from telebot import types
from telebot import TeleBot

GAMES_PATH = "base/games.json"
edit_sessions = {}


def request_game_deletion(bot: TeleBot, message, send_welcome):
    bot.send_message(message.chat.id, "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, lambda msg: handle_game_deletion(bot, msg, send_welcome))


def handle_game_deletion(bot: TeleBot, message, send_welcome):
    game_name = message.text.strip()
    chat_id = message.chat.id

    try:
        with open(GAMES_PATH, "r", encoding="utf-8") as f:
            games = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        games = {}

    if game_name in games:
        del games[game_name]
        with open(GAMES_PATH, "w", encoding="utf-8") as f:
            json.dump(games, f, ensure_ascii=False, indent=4)

        bot.send_message(chat_id, f"‚úÖ –ò–≥—Ä–∞ *{game_name}* —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", parse_mode="Markdown")
    else:
        bot.send_message(chat_id, (
            f"‚ùå –ò–≥—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º *{game_name}* –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑ —Å–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –∏–≥—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏."
        ), parse_mode="Markdown")

    send_welcome(bot, message)


def request_game_edit(bot, message, send_welcome):
    bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –¥–µ—Ç–∞–ª–∏ –∫–æ—Ç–æ—Ä–æ–π –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    bot.register_next_step_handler(message, lambda msg: start_edit_process(bot, msg, send_welcome))


def start_edit_process(bot, message, send_welcome):
    chat_id = message.chat.id
    original_name = message.text.strip()
    edit_sessions[chat_id] = {"original_name": original_name}
    bot.send_message(chat_id, "üîé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:")
    bot.register_next_step_handler(message, lambda msg: get_game_name_edit(bot, msg))


def get_game_name_edit(bot, message):
    chat_id = message.chat.id
    edit_sessions[chat_id]["game_name"] = message.text.strip()
    bot.send_message(chat_id, "üé≤ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 30–º, 1—á, 1—á 30–º):")
    bot.register_next_step_handler(message, lambda msg: get_duration_edit(bot, msg, "training"))


def get_duration_edit(bot, message, key):
    chat_id = message.chat.id
    text = message.text.strip()
    pattern = r'^((\d{1,2}—á)?\s?(\d{1,2}–º)?)$'
    match = re.match(pattern, text)

    if not match:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: '30–º', '1—á', '1—á 30–º'")
        bot.register_next_step_handler(message, lambda msg: get_duration_edit(bot, msg, key))
        return

    if "—á" in text:
        hours = int(re.search(r'(\d{1,2})—á', text).group(1))
        if not (1 <= hours <= 24):
            bot.send_message(chat_id, "‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 24.")
            bot.register_next_step_handler(message, lambda msg: get_duration_edit(bot, msg, key))
            return

    if "–º" in text:
        minutes = int(re.search(r'(\d{1,2})–º', text).group(1))
        if not (1 <= minutes <= 60):
            bot.send_message(chat_id, "‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 60.")
            bot.register_next_step_handler(message, lambda msg: get_duration_edit(bot, msg, key))
            return

    edit_sessions[chat_id][key] = text
    if key == "training":
        bot.send_message(chat_id, "üé≤ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 30–º, 1—á, 1—á 30–º):")
        bot.register_next_step_handler(message, lambda msg: get_duration_edit(bot, msg, "party"))
    else:
        bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–¥–¥.–º–º.–≥–≥–≥–≥):")
        bot.register_next_step_handler(message, lambda msg: get_date_edit(bot, msg))


def get_date_edit(bot, message):
    chat_id = message.chat.id
    text = message.text.strip()
    try:
        date_obj = datetime.strptime(text, "%d.%m.%Y")
        edit_sessions[chat_id]["date"] = date_obj
        bot.send_message(chat_id, "üïì –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 14:00):")
        bot.register_next_step_handler(message, lambda msg: get_time_edit(bot, msg))
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
        bot.register_next_step_handler(message, lambda msg: get_date_edit(bot, msg))


def get_time_edit(bot, message):
    chat_id = message.chat.id
    text = message.text.strip()
    try:
        time_obj = datetime.strptime(text, "%H:%M").time()
        edit_sessions[chat_id]["time"] = time_obj
        bot.send_message(chat_id, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:")
        bot.register_next_step_handler(message, lambda msg: get_number_edit(bot, msg, "players"))
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, lambda msg: get_time_edit(bot, msg))


def get_number_edit(bot, message, key):
    chat_id = message.chat.id
    text = message.text.strip()

    if not text.isdigit():
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, lambda msg: get_number_edit(bot, msg, key))
        return

    edit_sessions[chat_id][key] = int(text)

    if key == "players":
        bot.send_message(chat_id, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–µ—Å—Ç:")
        bot.register_next_step_handler(message, lambda msg: get_number_edit(bot, msg, "reserve"))
    else:
        markup = types.InlineKeyboardMarkup()
        skip_button = types.InlineKeyboardButton("üí≥ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment_edit")
        markup.add(skip_button)
        bot.send_message(chat_id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: handle_comment_edit(bot, msg))


def handle_comment_edit(bot, message):
    chat_id = message.chat.id

    if chat_id not in edit_sessions:
        bot.send_message(chat_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    edit_sessions[chat_id]["comment"] = message.text.strip()
    show_summary_edit(bot, chat_id)


def show_summary_edit(bot, chat_id):
    data = edit_sessions.get(chat_id, {})
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    date_obj = data["date"]
    weekday = date_obj.strftime("%A")
    date_str = date_obj.strftime("%d.%m.%Y")

    summary = (
        f"*üé≤ {data['game_name']}*\n"
        f"üóì {date_str} ({weekday_ru.get(weekday, weekday)})\n"
        f"üïì {data['time'].strftime('%H:%M')}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {data['players']}, –†–µ–∑–µ—Ä–≤: {data['reserve']}\n"
        f"üìö –û–±—É—á–µ–Ω–∏–µ: {data['training']}, –ü–∞—Ä—Ç–∏—è: {data['party']}\n"
        f"üí¨ {data.get('comment', '')}"
    )

    markup = types.InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton("‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_edit")
    cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")
    markup.add(confirm_btn, cancel_btn)

    bot.send_message(chat_id, summary, reply_markup=markup, parse_mode="Markdown")


def register_edit_handlers(bot, send_welcome):
    @bot.callback_query_handler(func=lambda call: call.data == "confirm_edit")
    def handle_confirm_edit(call):
        chat_id = call.message.chat.id
        data = edit_sessions.get(chat_id)

        if not data or "original_name" not in data or "game_name" not in data:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            bot.answer_callback_query(call.id)
            return

        weekday = data["date"].strftime("%A")
        weekday_ru = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        game_entry = {
            "game_name": data["game_name"],
            "date": data["date"].strftime("%d.%m.%Y"),
            "weekday": weekday_ru.get(weekday, weekday),
            "time": data["time"].strftime("%H:%M"),
            "training": data["training"],
            "party": data["party"],
            "players": int(data["players"]),
            "reserve": int(data["reserve"]),
            "comment": data.get("comment", "")
        }

        try:
            with open(GAMES_PATH, "r", encoding="utf-8") as f:
                games = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            games = {}

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if data["original_name"] in games:
            del games[data["original_name"]]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–¥ –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        games[data["game_name"]] = game_entry

        with open(GAMES_PATH, "w", encoding="utf-8") as f:
            json.dump(games, f, ensure_ascii=False, indent=4)

        edit_sessions.pop(chat_id, None)
        bot.answer_callback_query(call.id, f"‚úÖ –ò–≥—Ä–∞ *{data['game_name']}* —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", show_alert=False)
        send_welcome(bot, call.message)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_edit")
    def handle_cancel_edit(call):
        chat_id = call.message.chat.id
        edit_sessions.pop(chat_id, None)
        bot.answer_callback_query(call.id, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        send_welcome(bot, call.message)

    @bot.callback_query_handler(func=lambda call: call.data == "skip_comment_edit")
    def handle_skip_comment_edit(call):
        chat_id = call.message.chat.id

        if chat_id not in edit_sessions:
            bot.send_message(chat_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        edit_sessions[chat_id]["comment"] = ""
        bot.answer_callback_query(call.id)
        show_summary_edit(bot, chat_id)
