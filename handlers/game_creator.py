import json
import re
from datetime import datetime
from telebot import types

GAMES_PATH = "base/games.json"
user_sessions = {}


def create_game(bot, message):
    chat_id = message.chat.id
    user_sessions[chat_id] = {}
    bot.send_message(chat_id, "üîé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ê–ª–∫–æ—Ç–µ—Å—Ç–µ—Ä):")
    bot.register_next_step_handler(message, lambda msg: get_game_name(bot, msg))


def get_game_name(bot, message):
    chat_id = message.chat.id
    game_name = message.text.strip()

    try:
        with open(GAMES_PATH, "r", encoding="utf-8") as f:
            games = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        games = []

    if game_name in games:
        bot.send_message(chat_id, "‚ùå –¢–∞–∫–∞—è –∏–≥—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(message, lambda msg: get_game_name(bot, msg))
        return

    user_sessions[chat_id]["game_name"] = game_name
    bot.send_message(chat_id, "üé≤ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 30–º, 1—á, 1—á 30–º):")
    bot.register_next_step_handler(message, lambda msg: get_duration(bot, msg, "training"))


def get_duration(bot, message, key):
    chat_id = message.chat.id
    text = message.text.strip()
    pattern = r'^((\d{1,2}—á)?\s?(\d{1,2}–º)?)$'
    match = re.match(pattern, text)

    if not match:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: '30–º', '1—á', '1—á 30–º'")
        bot.register_next_step_handler(message, lambda msg: get_duration(bot, msg, key))
        return

    if "—á" in text:
        hours = int(re.search(r'(\d{1,2})—á', text).group(1))
        if not (1 <= hours <= 24):
            bot.send_message(chat_id, "‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 24.")
            bot.register_next_step_handler(message, lambda msg: get_duration(bot, msg, key))
            return

    if "–º" in text:
        minutes = int(re.search(r'(\d{1,2})–º', text).group(1))
        if not (1 <= minutes <= 60):
            bot.send_message(chat_id, "‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 60.")
            bot.register_next_step_handler(message, lambda msg: get_duration(bot, msg, key))
            return

    user_sessions[chat_id][key] = text
    if key == "training":
        bot.send_message(chat_id, "üé≤ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 30–º, 1—á, 1—á 30–º):")
        bot.register_next_step_handler(message, lambda msg: get_duration(bot, msg, "party"))
    else:
        bot.send_message(chat_id, "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å (–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥):")
        bot.register_next_step_handler(message, lambda msg: get_date(bot, msg))


def get_date(bot, message):
    chat_id = message.chat.id
    text = message.text.strip()
    try:
        date_obj = datetime.strptime(text, "%d.%m.%Y")
        user_sessions[chat_id]["date"] = date_obj
        bot.send_message(chat_id, "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 14:00):")
        bot.register_next_step_handler(message, lambda msg: get_time(bot, msg))
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
        bot.register_next_step_handler(message, lambda msg: get_date(bot, msg))


def get_time(bot, message):
    chat_id = message.chat.id
    text = message.text.strip()
    try:
        time_obj = datetime.strptime(text, "%H:%M").time()
        user_sessions[chat_id]["time"] = time_obj
        bot.send_message(chat_id, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:")
        bot.register_next_step_handler(message, lambda msg: get_number(bot, msg, "players"))
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        bot.register_next_step_handler(message, lambda msg: get_time(bot, msg))


def get_number(bot, message, key):
    chat_id = message.chat.id
    text = message.text.strip()

    if not text.isdigit():
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, lambda msg: get_number(bot, msg, key))
        return

    user_sessions[chat_id][key] = int(text)

    if key == "players":
        bot.send_message(chat_id, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–µ—Å—Ç:")
        bot.register_next_step_handler(message, lambda msg: get_number(bot, msg, "reserve"))
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        markup = types.InlineKeyboardMarkup()
        skip_button = types.InlineKeyboardButton("üí≥ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")
        markup.add(skip_button)

        bot.send_message(chat_id, "üé≤ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=markup)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        bot.register_next_step_handler(message, lambda msg: handle_text_comment(bot, msg))


def handle_text_comment(bot, message):
    chat_id = message.chat.id
    comment = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if comment != "üí≥ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_sessions[chat_id]["comment"] = comment
        show_summary(bot, chat_id)


def get_comment(bot, message):
    chat_id = message.chat.id
    comment = "" if message.text == "üí≥ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text.strip()
    user_sessions[chat_id]["comment"] = comment
    show_summary(bot, chat_id)


def show_summary(bot, chat_id):
    data = user_sessions[chat_id]
    date_obj = data["date"]
    weekday = date_obj.strftime("%A")

    # –ü–µ—Ä–µ–≤–æ–¥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    weekday_ru = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    # –ü–µ—Ä–µ–≤–æ–¥ –º–µ—Å—è—Ü–∞
    months_ru = {
        "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞",
        "April": "–∞–ø—Ä–µ–ª—è", "May": "–º–∞—è", "June": "–∏—é–Ω—è",
        "July": "–∏—é–ª—è", "August": "–∞–≤–≥—É—Å—Ç–∞", "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
        "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è"
    }

    date_str = date_obj.strftime("%d %B %Y")
    for en, ru in months_ru.items():
        date_str = date_str.replace(en, ru)

    summary = (
        f"üé≤ {data['game_name']}\n\n"
        f"üóì {date_str}\n"
        f"üóì {weekday_ru.get(weekday, weekday)}\n"
        f"üïì {data['time'].strftime('%H:%M')}\n\n"
        f"üë§ –ò–≥—Ä–æ–∫–æ–≤: {data['players']}\n"
        f"üë§ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–µ—Å—Ç: {data['reserve']}\n\n"
        f"üïì –û–±—É—á–µ–Ω–∏–µ: {data['training']}\n"
        f"üïì –í—Ä–µ–º—è –ø–∞—Ä—Ç–∏–∏: {data['party']}\n\n"
        f"{data['comment'] if data['comment'] else ''}"
    )

    bot.send_message(chat_id, summary)

    # –ö–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞"
    markup = types.InlineKeyboardMarkup()
    publish_btn = types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_game")
    cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_game")
    markup.add(publish_btn, cancel_btn)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
